apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-kube2iam-annotations
  annotations:
    policies.kyverno.io/title: Restrict kube2iam Annotations
    policies.kyverno.io/category: AWS
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Pod, Annotation
    policies.kyverno.io/description: >-
      This policy restricts the use of the kube2iam annotation. The kube2iam annotation
      is used to grant IAM roles to pods.
    pod-policies.kyverno.io/autogen-controllers: None
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: block-kube2iam-annotation
      context:
        - name: mapAllowedAssumeRole
          configMap:
            name: kube2iam-access
            namespace: wsp-ns
        - name: map_ns_and_roles
          variable:
            jmesPath: 'parse_yaml(mapAllowedAssumeRole.data.allowFor)'
        - name: roleARN
          variable:
            jmesPath: request.object.metadata.annotations."iam.amazonaws.com/role"
      match:
        any:
          - resources:
              kinds:
                - Deployment
                - Pod
      preconditions:
        all:
          - key: "{{ request.operation || 'BACKGROUND' }}"
            operator: AnyIn
            value:
              - CREATE
              - UPDATE
          - key: "{{request.object.metadata.namespace}}"
            operator: AnyNotIn
            value:
              - cert-manager
              - karpenter
              - kube-system
          - key: "iam.amazonaws.com/role"
            operator: AnyIn
            value: "{{request.object.metadata.annotations.keys(@)[]}}"
      validate:
        message: "Deny using the 'iam.amazonaws.com/role: {{roleARN}}' annotation (kube2iam)
        into the {{request.object.metadata.name}} pod namespace of the {{request.object.metadata.namespace}} namespace"
        deny:
          conditions:
            all:
              # There is a role in the map of allowed NS for current object
              - key: "{{ contains(map_ns_and_roles.\"{{request.object.metadata.namespace}}\", roleARN)}}"
                operator: NotEquals
                value: true
              # There is '*' in the map of allowed NS for current NS
              - key: "{{ contains(map_ns_and_roles.\"{{request.object.metadata.namespace}}\", '*')}}"
                operator: NotEquals
                value: true
    - name: block-kube2iam-annotation-apps
      context:
        - name: mapAllowedAssumeRole
          configMap:
            name: kube2iam-access
            namespace: wsp-ns
        - name: map_ns_and_roles
          variable:
            jmesPath: 'parse_yaml(mapAllowedAssumeRole.data.allowFor)'
        - name: roleARN
          variable:
            jmesPath: request.object.spec.template.metadata.annotations."iam.amazonaws.com/role"
      match:
        any:
          - resources:
              kinds:
                - Deployment
                - ReplicaSet
                - StatefulSet
                - DaemonSet
                - CronJob
                - Job
      preconditions:
        all:
          - key: "{{ request.operation || 'BACKGROUND' }}"
            operator: AnyIn
            value:
              - CREATE
              - UPDATE
          - key: "{{request.object.metadata.namespace}}"
            operator: AnyNotIn
            value:
              - cert-manager
              - karpenter
              - kube-system
          - key: "iam.amazonaws.com/role"
            operator: AnyIn
            value: "{{request.object.spec.template.metadata.annotations.keys(@)[]}}"
      validate:
        message: "Deny using the 'iam.amazonaws.com/role: {{roleARN}}' annotation (kube2iam)
        into the {{request.object.metadata.name}} {{request.object.kind}} of the {{request.object.metadata.namespace}} namespace"
        deny:
          conditions:
            all:
              # There is a role in the map of allowed NS for current object
              - key: "{{ contains(map_ns_and_roles.\"{{request.object.metadata.namespace}}\", roleARN)}}"
                operator: NotEquals
                value: true
              # There is '*' in the map of allowed NS for current NS
              - key: "{{ contains(map_ns_and_roles.\"{{request.object.metadata.namespace}}\", '*')}}"
                operator: NotEquals
                value: true
